// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    Mux16(a=x,b=false,sel=zx,out=zxOp);
    Mux16(a=y,b=false,sel=zy,out=zyOp);
    Not16(in=zxOp,out=notZXOp);
    Not16(in=zyOp,out=notZYOp);
    Mux16(a=zxOp,b=notZXOp,sel=nx,out=nxOp);
    Mux16(a=zyOp,b=notZYOp,sel=ny,out=nyOp);
    Add16(a=nxOp,b=nyOp,out=XplusY);
    And16(a=nxOp,b=nyOp,out=XandY);
    Mux16(a=XandY,b=XplusY,sel=f,out=fOfXY);
    Not16(in=fOfXY,out=notFOfXY);
    Mux16(a=fOfXY,b=notFOfXY,sel=no,out=out,
        out[15]=out15,
        out[14]=out14,
        out[13]=out13,
        out[12]=out12,
        out[11]=out11,
        out[10]=out10,
        out[9]=out9,
        out[8]=out8,
        out[7]=out7,
        out[6]=out6,
        out[5]=out5,
        out[4]=out4,
        out[3]=out3,
        out[2]=out2,
        out[1]=out1,
        out[0]=out0
    );

    And(a=out15,b=true,out=ng);

    Or(a=out0,b=out1,out=or1);
    Or(a=out2,b=out3,out=or2);
    Or(a=out4,b=out5,out=or3);
    Or(a=out6,b=out7,out=or4);
    Or(a=out8,b=out9,out=or5);
    Or(a=out10,b=out11,out=or6);
    Or(a=out12,b=out13,out=or7);
    Or(a=out14,b=out15,out=or8);
    Or(a=or1,b=or2,out=or9);
    Or(a=or3,b=or4,out=or10);
    Or(a=or5,b=or6,out=or11);
    Or(a=or7,b=or8,out=or12);
    Or(a=or9,b=or10,out=or13);
    Or(a=or11,b=or12,out=or14);
    Or(a=or13, b=or14,out=notzr);
    Not(in=notzr,out=zr);
}
