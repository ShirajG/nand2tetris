// ProgramFlow/FibonacciSeries/FibonacciSeries.asm.asm
// push argument 1
@ARG
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 1
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@3
D=A
@1
D=D+A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// push constant 0
@0
D=A;
@SP
A=M
M=D
@SP
M=M+1
// pop that 0
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@THAT
D=M
@0
D=D+A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// push constant 1
@1
D=A;
@SP
A=M
M=D
@SP
M=M+1
// pop that 1
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@THAT
D=M
@1
D=D+A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A;
@SP
A=M
M=D
@SP
M=M+1
@SP
M=M-1
//Sub
@SP
A=M;
D=M;
A=A-1;
D=M-D;
M=D;
// pop argument 0
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@ARG
D=M
@0
D=D+A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// Label
(MAIN_LOOP_START)

// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// If-goto COMPUTE_ELEMENT
@SP
M=M-1
A=M
D=M
@COMPUTE_ELEMENT
D;JNE
// Goto END_PROGRAM
@END_PROGRAM
0;JMP
// Label
(COMPUTE_ELEMENT)

// push that 0
@THAT
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push that 1
@THAT
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
M=M-1
//Add
@SP
A=M;
D=M;
A=A-1;
D=D+M;
M=D;
// pop that 2
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@THAT
D=M
@2
D=D+A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// push pointer 1
@3
D=A
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A;
@SP
A=M
M=D
@SP
M=M+1
@SP
M=M-1
//Add
@SP
A=M;
D=M;
A=A-1;
D=D+M;
M=D;
// pop pointer 1
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@3
D=A
@1
D=D+A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A;
@SP
A=M
M=D
@SP
M=M+1
@SP
M=M-1
//Sub
@SP
A=M;
D=M;
A=A-1;
D=M-D;
M=D;
// pop argument 0
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@ARG
D=M
@0
D=D+A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// Goto MAIN_LOOP_START
@MAIN_LOOP_START
0;JMP
// Label
(END_PROGRAM)

