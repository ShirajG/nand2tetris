// FunctionCalls/StaticsTest/StaticsTest.asm.asm
// SP to 256, call Sys.init
@256
D=A
@R0
M=D
//CALL Sys.init, not just jump...
@ReturnAddress0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(ReturnAddress0)
(Class1.set)
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop static 0
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@Class1.0
D=A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// push argument 1
@ARG
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop static 1
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@Class1.1
D=A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// push constant 0
@0
D=A;
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R7
M=D
@R6
M=D
M=M-1
M=M-1
M=M-1
M=M-1
M=M-1
A=M
D=M
@R6
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R7
D=M
D=D-1
A=D
D=M
@THAT
M=D
@R7
D=M
D=D-1
D=D-1
A=D
D=M
@THIS
M=D
@R7
D=M
D=D-1
D=D-1
D=D-1
A=D
D=M
@ARG
M=D
@R7
D=M
D=D-1
D=D-1
D=D-1
D=D-1
A=D
D=M
@LCL
M=D
@R6
A=M
0;JMP
(Class1.get)
// push static 0
@Class1.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1
@Class1.1
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
M=M-1
//Sub
@SP
A=M;
D=M;
A=A-1;
D=M-D;
M=D;
// return
@LCL
D=M
@R7
M=D
@R6
M=D
M=M-1
M=M-1
M=M-1
M=M-1
M=M-1
A=M
D=M
@R6
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R7
D=M
D=D-1
A=D
D=M
@THAT
M=D
@R7
D=M
D=D-1
D=D-1
A=D
D=M
@THIS
M=D
@R7
D=M
D=D-1
D=D-1
D=D-1
A=D
D=M
@ARG
M=D
@R7
D=M
D=D-1
D=D-1
D=D-1
D=D-1
A=D
D=M
@LCL
M=D
@R6
A=M
0;JMP
(Class2.set)
// push argument 0
@ARG
D=M
@0
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop static 0
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@Class2.0
D=A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// push argument 1
@ARG
D=M
@1
D=D+A
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// pop static 1
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@Class2.1
D=A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// push constant 0
@0
D=A;
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R7
M=D
@R6
M=D
M=M-1
M=M-1
M=M-1
M=M-1
M=M-1
A=M
D=M
@R6
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R7
D=M
D=D-1
A=D
D=M
@THAT
M=D
@R7
D=M
D=D-1
D=D-1
A=D
D=M
@THIS
M=D
@R7
D=M
D=D-1
D=D-1
D=D-1
A=D
D=M
@ARG
M=D
@R7
D=M
D=D-1
D=D-1
D=D-1
D=D-1
A=D
D=M
@LCL
M=D
@R6
A=M
0;JMP
(Class2.get)
// push static 0
@Class2.0
D=M
@SP
A=M
M=D
@SP
M=M+1
// push static 1
@Class2.1
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
M=M-1
//Sub
@SP
A=M;
D=M;
A=A-1;
D=M-D;
M=D;
// return
@LCL
D=M
@R7
M=D
@R6
M=D
M=M-1
M=M-1
M=M-1
M=M-1
M=M-1
A=M
D=M
@R6
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R7
D=M
D=D-1
A=D
D=M
@THAT
M=D
@R7
D=M
D=D-1
D=D-1
A=D
D=M
@THIS
M=D
@R7
D=M
D=D-1
D=D-1
D=D-1
A=D
D=M
@ARG
M=D
@R7
D=M
D=D-1
D=D-1
D=D-1
D=D-1
A=D
D=M
@LCL
M=D
@R6
A=M
0;JMP
(Sys.init)
// push constant 6
@6
D=A;
@SP
A=M
M=D
@SP
M=M+1
// push constant 8
@8
D=A;
@SP
A=M
M=D
@SP
M=M+1
// call Class1.set 2
@ReturnAddress1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.set
0;JMP
(ReturnAddress1)
// pop temp 0
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@5
D=A
@0
D=D+A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// push constant 23
@23
D=A;
@SP
A=M
M=D
@SP
M=M+1
// push constant 15
@15
D=A;
@SP
A=M
M=D
@SP
M=M+1
// call Class2.set 2
@ReturnAddress2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.set
0;JMP
(ReturnAddress2)
// pop temp 0
@SP
M=M-1
@SP
A=M
D=M
@R13
M=D
@5
D=A
@0
D=D+A
@R14
M=D
@R13
D=M
@R14
A=M
M=D
// call Class1.get 0
@ReturnAddress3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.get
0;JMP
(ReturnAddress3)
// call Class2.get 0
@ReturnAddress4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.get
0;JMP
(ReturnAddress4)
// Label
(WHILE)

// Goto WHILE
@WHILE
0;JMP
