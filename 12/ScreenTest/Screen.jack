// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static int screenBase;
    static boolean currentColor;

    /** Initializes the Screen. */
    function void init() {
      let screenBase = 16384;
      let currentColor = true;
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int i;
      let i = 0;
      while(i < 512) {
        do Memory.poke((screenBase + i),0);
        let i = i + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let currentColor = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int baseWord, pixelOffset, currentContent, i, mask;
      let baseWord = (y * 32) + (x / 16) + screenBase;
      let currentContent = Memory.peek(baseWord);
      let pixelOffset = x - ((x/16) * 16);
      let mask = 1;

      while (pixelOffset > 0) {
        let mask = mask * 2;
        let pixelOffset = pixelOffset - 1;
      }

      if (~currentColor) {
        let mask = ~mask;
        let currentContent = (currentContent & mask);
      } else {
        let currentContent = (currentContent | mask);
      }

      do Memory.poke(baseWord, currentContent);
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int dx, dy, a, b, slopeDirection, diff;
      let a = 0;
      let b = 0;
      let dx = Math.abs(x2 - x1);
      let dy = y2 - y1;
      let diff = 0;

      // Horizontal Line
      if (dy = 0) {
        while (~(a > dx)) {
          do Screen.drawPixel(x1 + a, y1);
          let a = a + 1;
        }
      }

      // Vertical Line
      if (dx = 0) {
        while (~(b > dy)) {
          do Screen.drawPixel(x1, y1 + b);
          let b = b + 1;
        }
      }

      if (~(dx = 0) & ~(dy = 0)) {
        if (dy < 0) {
          while (~(a > dx) & ~(b > dy)) {
            do Output.printString("here");
            do Screen.drawPixel(x1 + a, y1 - b);
            if (diff < 0) {
              let a = a + 1;
              let diff = diff + dy;
            } else {
              let b = b + 1;
              let diff = diff - dx;
            }
          }
        } else {
          while (~(a > dx) & ~(b > dy)) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
              let a = a + 1;
              let diff = diff + dy;
            } else {
              let b = b + 1;
              let diff = diff - dx;
            }
          }
        }
      }

      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      return;
    }
}
