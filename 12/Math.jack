// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array nthPowerOfTwo;

    /** Initializes the library. */
    function void init() {
      var int i, power;
      let power = 1;
      let i = 0;
      let nthPowerOfTwo = Array.new(16);
      while (i < 16) {
        let nthPowerOfTwo[i] = power;
        let power = power + power;
        let i = i + 1;
      }
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x > 0){
        return x;
      }
      return -x;
    }

    /** Returns whether the j-th bit of x == 1 */
    function boolean bit(int x, int j) {
      return ((x & nthPowerOfTwo[j]) = nthPowerOfTwo[j]);
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, j, shiftedX;
      let shiftedX = x;
      let sum = 0;
      let j = 0;
      while (j<16) {
        if(Math.bit(y,j)) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let j = j + 1;
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int q;
      var boolean neg;

      let neg = false;

      if (~(Math.abs(x) = x)){
        let neg = ~(neg);
        let x = Math.abs(x);
      }

      if (~(Math.abs(y) = y)){
        let neg = ~(neg);
        let y = Math.abs(y);
      }

      if (y > x) { return 0; }
      if (y < 0) { return 0; }

      let q = Math.divide(x, (2 * y));

      if ((x - (2 * q * y)) < y ) {
        if (neg) {
          return ((2 * q )* -1);
        } else {
          return 2 * q;
        }
      } else {
        if (neg) {
          return (((2 * q) + 1) * -1);
        } else {
          return (2 * q ) + 1;
        }
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y,j,squaredTerm, term;
      let y = 0;
      let j = (x/2) - 1;
      if (j > 7){
        let j = 7;
      }
      while(~(j < 0)) {
        let term = y + nthPowerOfTwo[j];
        let squaredTerm = term * term;
        if (squaredTerm < 0) { } else {
          if(~(squaredTerm > x)) {
            let y = y + nthPowerOfTwo[j];
          }
        }
        let j = j - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if(a > b){
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if(a < b){
        return a;
      }
      return b;
    }
}
