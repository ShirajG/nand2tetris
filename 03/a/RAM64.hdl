// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:

    // Determine which register to access
    DMux8Way(in=load,sel=address[0..2],
      a=loadA,
      b=loadB,
      c=loadC,
      d=loadD,
      e=loadE,
      f=loadF,
      g=loadG,
      h=loadH
    );

    RAM8(in=in,out=a,load=loadA,address=address[3..5]);
    RAM8(in=in,out=b,load=loadB,address=address[3..5]);
    RAM8(in=in,out=c,load=loadC,address=address[3..5]);
    RAM8(in=in,out=d,load=loadD,address=address[3..5]);
    RAM8(in=in,out=e,load=loadE,address=address[3..5]);
    RAM8(in=in,out=f,load=loadF,address=address[3..5]);
    RAM8(in=in,out=g,load=loadG,address=address[3..5]);
    RAM8(in=in,out=h,load=loadH,address=address[3..5]);

    // Determine which output
    Mux8Way16(a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h,sel=address[0..2],out=out);

}
