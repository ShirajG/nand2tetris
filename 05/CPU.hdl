// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction Bits
    // ixxaccccccdddjjj
    // 1111119876543210
    // 543210
    // 1110110111100000

    // Destination Logic when a C instruction:
    // instruction[5] loads reg A
    // instruction[4] loads reg D
    // instruction[3] saves to Memory
    // A instruction if MSB is 0
    Not(in=instruction[15], out=loadAforAIns);
    And(a=instruction[5],b=instruction[15],out=loadAforCIns);
    Or(a=loadAforAIns,b=loadAforCIns,out=loadA);

    And(a=instruction[4],b=instruction[15],out=loadD);
    And(a=instruction[3],b=instruction[15],out=writeM);

    // ALU Out Or Instruction
    Mux16(a=ALUOut,b=instruction,out=ALUOrIns,sel=loadA);
    // A Register Or M input
    Mux16(a=regAOut,b=inM,out=regAOrM,sel=instruction[12]);

    // A Register
    ARegister(in=ALUOrIns,load=loadA,out=regAOut,out[0..14]=addressM);
    // D Register
    DRegister(in=ALUOut,load=loadD,out=regDOut);
    // 1110110000010000

    // PC  Register
    // Load bit should only be set if a jump should happen, this lets
    // the address from the A register replace the current value.
    // Otherwise, increment
    PC(in=regAOut,reset=reset,load=jump,inc=true,out[0..14]=pc);

    // Instruction Bits
    // ixxaccccccdddjjj
    // 1111119876543210
    // 543210

    ALU(
      x=regDOut,  // 16-bit input
      y=regAOrM,  // 16-bit input
      zx=instruction[11], // zero the x input?
      nx=instruction[10], // negate the x input?
      zy=instruction[9], // zero the y input?
      ny=instruction[8], // negate the y input?
      f=instruction[7],  // compute out = x + y (if 1) or x & y (if 0)
      no=instruction[6], // negate the out output?
      // OUTOUTS
      out=ALUOut, // 16-bit output
      out=outM,
      zr=zr, // 1 if (out == 0), 0 otherwise
      ng=ng // 1 if (out < 0),  0 otherwise
    );

    // Compute Jump Logic
    // Jump should only happen if C instruction And:
    // and(j1,j2,j3) ||
    And(a=instruction[2], b=instruction[1], out=j1Andj2);
    And(a=instruction[0], b=j1Andj2, out=forceJump);
    // and(zr,j2) ||
    And(a=zr,b=instruction[1],out=zeroAndj2);
    // and(ng,j1) ||
    And(a=ng,b=instruction[2],out=negAndj1);
    // and(!or(zr,ng),j3)
    Or(a=zr,b=ng,out=zrOrng);
    Not(in=zrOrng,out=notzrOrng);
    And(a=notzrOrng,b=instruction[0],out=notzrOrngAndj3);
    // jump can now be used to set the load bit on the pc
    Or8Way(in[0]=forceJump,in[1]=zeroAndj2,in[2]=negAndj1,in[3]=notzrOrngAndj3,out=jumpish);
    And(a=jumpish,b=instruction[15],out=jump);
}

